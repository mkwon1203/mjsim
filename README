==========
MJSIM 1.0

Copyright ((c)) 2011, Colorado State University
All rights reserved.
==========

MJSim is an Atmel AVR simulator and MeggyJr emulator that was developed for use
in an introduction to compilers course at Colorado State University,
http://www.cs.colostate.edu/~cs453. MJSim can be used in batch mode to enable
grading or be used in GUI mode where one can step through the AVR instructions,
set break points, visualize the stack, heap, registers, and condition codes,
and visualize the MeggyJr as calls to a slightly modified version of the
MeggyJr simple run-time library are made.

---------------------
Quick start for users
---------------------
    
    0) Download and untar mjsim-1.0.tar.
        tar xf mjsim-1.0.tar

    1) Build the jar file, MJSIM.jar.
        cd mjsim-1.0/
        make

    2) Run the regression tests to see an example of using MJSIM.jar.
        cd RegressionTesting/
        ./regress.sh


---------------------
Command Line Options
---------------------
java -jar ../MJSIM.jar --help
usage: AVRSim
 -b,--batch        run in batch mode
 -f,--file <arg>   initial AVR assembly file to read in
 -h,--help         print usage info
 -i,--instrcount   print out dynamic count of load and store instructions
 -j <arg>          number of jumps allowed on a label
 -t                trace logging output (only use for debugging)
 -v                verbose logging output



-----------------------
REGARDING THE MEGGYJR EMULATOR
-----------------------

The emulator is located in the bottom left corner of the simulator (MJSIM)
and depicts what the Meggy device would actually look like after completing
each simulated instruction.  Initial functionality of this emulator includes
the 8x8 LED grid and button presses; AuxLEDs, the reset button and sounds are
not supported at this time.  

Code for emulator layout is located in avrSim.bxml along with simulator layout.  
Code for emulator functionality is located in BaseWindow.java inside the 
src/ui/components directory (search for "updateEmulator()").  Images for the
emulator are available for editing in the form of .xcf files, and are released
as .png files, all of which are located in src/ui/images.  

A simple animation scheme is used for displaying changes to the emulator.
For example, for a set pixel call, a background image (meggySimBack.png) is 
kept on the screen while a smaller LED image (like redLED.png) is
positioned and overlayed on the background image with coordinates that 
make it appear like it is actually in the LED grid.  When the pixel is
darkened, the LED image is removed.  All animations work in this way with the
addition and removal of images.

Updates to the emulator occur whenever the simulator gui is updated
(i.e., updateEmulator() is called by an updateGui() function).  BaseWindow
queries the MachineState class for status on each LED and each Button
and lights an LED or presses a button accordingly on the emulator.

All images are cleared at the beginning of an update, and any LEDs or buttons
that continue to be lit up or pressed will be handled again during this update.

-- Cassie Helms, 5/17/2011 @ 4:01 PM

-----------------------
Overview for developers
-----------------------

The main function in src/ui/Main.java parses the command line options and
constructs and runs a simulator object (src/ui/AVRSim.java).  The AVRSim object
loads the assembly file into an ATmegaProgram object
(src/instructions/ATmegaProgram.java), creates a MachineState instance
(src/machine/MachineState.java), and has the machine execute each instruction.

The machine state during the simulation is maintained in MachineState.java. 
MachineState will call the execution wrapper for each instruction and then each
instruction has an execute method.  In the execute method of each instruction,
the instruction may query the machine state and/or modify an UpdateEvent object
that the Instr base class in executeWrapper() passes to the machine state to
update the machine.

Any calls to the Meggy Jr Simple library interface are intercepted by the 
MachineState and handled by an object specific to that call.  The function 
objects live in src/machine/functions/.

----------------------------------------------------------
Adding a New Instruction or Run-time library function call
----------------------------------------------------------

If the instruction needs new tokens then update the src/parse/sim.lex file.
Update the sim_inst.cup with the new grammar rule for the instruction.
Then create an instruction or function class in either the src/instructions/
or src/machine/functions/ subdirectories.  If you are creating a new
run-time library function, then the MachineState.java file must be
updated to intercept that function call.  Do a search for "_Z6DrawPxhhh"
to see where that occurs.  We currently build the run-time library
with avr-gcc, therefore the function names are the mangled ones created
by avr-gcc.


-----------------------
Contributing changes
-----------------------
We are open to changes that people would like to contribute.  Since MJSIM is
being used to grade in a class setting, it is crucial that any new features
do not break the regression tests in the RegressionTesting subdirectory.
If you can demonstrate that those tests still work and you provide us a
test of your own, then any useful changes will be accepted.  See the
list of issues at the google code webiste for mjsim for possible contributions.

-------
Credits
-------

Ryan Moore wrote MJSIM for his honors thesis and developed
the GUI for visualizing the stack and heap, setting break points,
and stepping through the code.

Michelle Strout added the arg_opts functionality and any additional
instructions or run-time library function calls needed to support
the MeggyJava compilers developed for CS 453.

Cassandra Helms developed the MeggyJr emulator, incorporated it
into the MJSIM GUI, and created the mjsim logo.

Michael Miller developed the lexer and parser for MJSIM and added
some instructions like icall.

Laura Adams added the ability to play sound and output images of what
the Meggy screen looks like each time the DisplaySlate is updated.

